#version 450
#extension GL_EXT_nonuniform_qualifier : require



#define FLT_MAX_NORM 3.402823466e+38
#define FLT_MIN_NORM 1.175494351e-38
#define FLT_MAX 3.402823466e+38
#define FLT_MIN 1.175494351e-38
#define DBL_MAX 1.7976931348623158e+308
#define DBL_MIN 2.2250738585072014e-308




layout(set = 0, binding = 0) uniform sampler2D colors[]; //I delete Sampler2D directive
layout(set = 1, binding = 0) uniform sampler2D depths[]; //I delete Sampler2D directive
layout(set = 2, binding = 0) uniform writeonly image2D outColors; //I delete Sampler2D directive

layout(push_constant) uniform PushConstants {
  int layers_cnt;
} pushConstants;



ivec2 fragPosition;

vec4 outColor;


float maxDepth = 1.1;

void main() {
    fragPosition = ivec2(gl_GlobalInvocationID.xy);
    outColor = vec4(0.0, 0.0, 0.0, 1.0);
    
    for (int i = 0; i < pushConstants.layers_cnt; i++) {
        vec4 color = texture(colors[i], fragPosition); 
        float depth = texture(depths[i], fragPosition).r; 
        if (maxDepth > depth){
            maxDepth = depth;
            outColor.r = min(outColor.r * (1-color.a) + color.r, FLT_MAX_NORM);
            outColor.g = min(outColor.g * (1-color.a) + color.g, FLT_MAX_NORM);
            outColor.b = min(outColor.b * (1-color.a) + color.b, FLT_MAX_NORM);
            outColor.a = color.a;
        }else{
            outColor.r = min(outColor.r + color.r * (1-outColor.a), FLT_MAX_NORM);
            outColor.g = min(outColor.g + color.g * (1-outColor.a), FLT_MAX_NORM);
            outColor.b = min(outColor.b + color.b * (1-outColor.a), FLT_MAX_NORM);  
        }
        
        //outColor.a = min(color.a + outColor.a, FLT_MAX_NORM);
        
    }
    imageStore(outColors, fragPosition, outColor);
    
}
